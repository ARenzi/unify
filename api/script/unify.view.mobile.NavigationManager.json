{"attributes": {"name": "NavigationManager", "hasWarning": true, "packageName": "unify.view.mobile", "superClass": "qx.core.Object", "isSingleton": true, "fullName": "unify.view.mobile.NavigationManager", "type": "class"}, "type": "class", "children": [{"attributes": {"text": "<p>Manager for navigation of typical iPhone-like applications.</p>\n\n<ul>\n<li>Integrates with browser&#8217;s history managment</li>\n<li>Structures the location using &#8221;/&#8221; as divider for views and &#8221;:&#8221; for separating parameters.</li>\n<li>Supports multiple ways of controlling the location.</li>\n<li>Support for TabView like navigation with deep inner navigation</li>\n</ul>"}, "type": "desc"}, {"type": "constructor", "children": [{"attributes": {"docFrom": "qx.core.Object", "overriddenFrom": "qx.core.Object", "isCtor": true, "name": "ctor"}, "type": "method"}]}, {"type": "events", "children": [{"attributes": {"name": "navigate"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired every time the path has changed</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "unify.event.type.Navigate"}, "type": "entry"}]}]}]}, {"type": "methods", "children": [{"attributes": {"access": "private", "hasError": true, "name": "__androidBackButton"}, "type": "method", "children": [{"type": "errors", "children": [{"attributes": {"msg": "Documentation is missing.", "column": 27, "line": 402}, "type": "error"}]}]}, {"attributes": {"access": "private", "name": "__computeMode"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Current path</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "NavigationPath"}, "type": "entry"}]}]}, {"attributes": {"name": "old"}, "type": "param", "children": [{"attributes": {"text": "<p>Previous path</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "NavigationPath"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Computes the differences between to {@link NavigationPath} and returns\na value describing these differences.</p>\n\n<ul>\n<li>equal: both path are equal</li>\n<li>reset: current path is null</li>\n<li>initial: previous path is null</li>\n<li>swap: root view was changed via e.g. TabBar</li>\n<li>in: new path is deeper in hierarchy than previous one</li>\n<li>out: new path is lower in hiearchy than previous one</li>\n<li>replace: view was replaced with other view with same parent</li>\n<li>segment: only the segment in the view was replaced</li>\n<li>param: only the parameter of view was replaced</li>\n<li>null: other unknown change</li>\n</ul>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The computed mode</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "name": "__onHistoryChange"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "e"}, "type": "param", "children": [{"attributes": {"text": "<p>History event</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "unify.event.type.History"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Reacts on changes of the browser history.</p>"}, "type": "desc"}]}, {"attributes": {"name": "enter"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "view"}, "type": "param", "children": [{"attributes": {"text": "<p>View to enter (with optional param)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Enters the specified view (+param). This leads deeper into the navigation\nstructure e.g. &#8220;root&#8221; + &#8220;page1&#8221; => &#8220;root/page1&#8221;</p>"}, "type": "desc"}]}, {"attributes": {"name": "exec"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "func"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of function to execute (needs to be a public function!)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element which was clicked onto</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Executes the given function on the current view</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Return value of function to execute</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "follow"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "link"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element to follow</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Follows a <span class=\"caps\">HTML</span> link or any element with <code>goto</code> attribute</p>\n\n<p><strong>General</strong></p>\n\n<p>Navigation is possible using the attribute <code>goto</code> and <code>rel</code>. Executing\nmethods on the current view is possible using the <code>exec</code>. These two special attributes\nare only allowed on non-link elements.</p>\n\n<p>To execute commands just define the name of the method to execute as the value\nof the <code>exec</code> attribute. The function to execute needs to be public on the\ncurrent view and will be executed in context of the view, but without any parameters.</p>\n\n<p>These are the supported &#8220;rel&#8221; attributes:</p>\n\n<ul>\n<li><strong>param</strong>: Replaces the param of the current view with the value from <code>goto</code>.</li>\n<li><strong>up</strong>: Move one level up in structure. No <code>goto</code> supported.</li>\n<li><strong>parent</strong>: Move into the given view (+param) but on the same parent (replacing the current view in structure).</li>\n<li><strong>root</strong>: The given <code>goto</code> is processed in a way that it works as an absolute destination, completely ignoring the current position.</li>\n<li><strong>swap</strong>: Swaps to the root view given by the <code>goto</code> attribute. Stores and restores position inside of this root view.</li>\n</ul>\n\n<p>The <code>goto</code> attribute might contain a name of a view,\na value or a complete path depending on the value of the\n<code>rel</code> attribute.</p>\n\n<p>If no <code>rel</code> attribute is given, the view (+param) is appended to the current\npath which results into a navigation deeper inside the structure.</p>\n\n<p><strong>Links</strong></p>\n\n<p>For typical <span class=\"caps\">HTML</span> links only a subset of aboves features is available:</p>\n\n<ul>\n<li>open the link in a new window</li>\n<li>enter a child view</li>\n</ul>\n\n<p>The behavior depends on whether the link begins with a &#8221;#&#8221; or not. The hash\nsymbol marks internal references like in normal <span class=\"caps\">HTML</span>. A link to &#8221;#details&#8221; results\ninto a jump into the child view &#8220;details&#8221;. A link to &#8220;<a href=\"http://www.google.com&#8221\">http://www.google.com&#8221;</a>;\nopens a new window/tab to the given external <span class=\"caps\">URL</span>.</p>"}, "type": "desc"}]}, {"attributes": {"name": "getPath"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the navigation path object</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The path object</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "unify.view.mobile.NavigationPath"}, "type": "entry"}]}]}]}, {"attributes": {"name": "init"}, "type": "method", "children": [{"attributes": {"text": "<p>Initialized previous state from history or client-side storage.</p>\n\n<p>Should be called by the application as soon as all views are registered.</p>"}, "type": "desc"}]}, {"attributes": {"name": "jump"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "path"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid path</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Jumps to the specified path without respecting current position.</p>"}, "type": "desc"}]}, {"attributes": {"name": "parametize"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "param"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid param</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}, {"attributes": {"type": "Number"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Paremetize the current view with the given parameter. This leads to a refreshment\nof the current view.</p>"}, "type": "desc"}]}, {"attributes": {"name": "replace"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "view"}, "type": "param", "children": [{"attributes": {"text": "<p>Any valid view (with optional params)</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Replaces current view with the given view (+param) on the same parent</p>"}, "type": "desc"}]}, {"attributes": {"name": "segment"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "segment"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of segment</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Switches in the current view to the given segment</p>"}, "type": "desc"}]}, {"attributes": {"name": "swap"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "view"}, "type": "param", "children": [{"attributes": {"text": "<p>Indentifier of view to switch to e.g. the name of the Tab</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Switches the complete path to another path, but keeping the\noriginal path in a cache to jump back to the complete structure.</p>\n\n<p>This feature is especially useful for TabViews where we have\nsome kind of sub-navigation in each Tab.</p>"}, "type": "desc"}]}, {"attributes": {"name": "up"}, "type": "method", "children": [{"attributes": {"text": "<p>Jumps up a segment in the history structure</p>"}, "type": "desc"}]}]}, {"type": "methods-static", "children": [{"attributes": {"isStatic": true, "name": "getInstance"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns a singleton instance of this class. On the first call the class\nis instantiated by calling the constructor with no arguments. All following\ncalls will return this instance.</p>\n\n<p>This method has been added by setting the &#8220;type&#8221; key in the class definition\n({@link qx.Class#define}) to &#8220;singleton&#8221;.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The singleton instance of this class.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "unify.view.mobile.NavigationManager"}, "type": "entry"}]}]}]}]}]}